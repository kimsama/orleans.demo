// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace PlayerProgression.Command {
  public static class Controller
  {
    static readonly string __ServiceName = "PlayerProgression.Command.Controller";

    static readonly Marshaller<global::PlayerProgression.Command.AddPlayerRequest> __Marshaller_AddPlayerRequest = Marshallers.Create((arg) => arg.ToByteArray(), global::PlayerProgression.Command.AddPlayerRequest.ParseFrom);
    static readonly Marshaller<global::PlayerProgression.Command.AddPlayerReply> __Marshaller_AddPlayerReply = Marshallers.Create((arg) => arg.ToByteArray(), global::PlayerProgression.Command.AddPlayerReply.ParseFrom);
    static readonly Marshaller<global::PlayerProgression.Command.StartGameRequest> __Marshaller_StartGameRequest = Marshallers.Create((arg) => arg.ToByteArray(), global::PlayerProgression.Command.StartGameRequest.ParseFrom);
    static readonly Marshaller<global::PlayerProgression.Command.StartGameReply> __Marshaller_StartGameReply = Marshallers.Create((arg) => arg.ToByteArray(), global::PlayerProgression.Command.StartGameReply.ParseFrom);

    static readonly Method<global::PlayerProgression.Command.AddPlayerRequest, global::PlayerProgression.Command.AddPlayerReply> __Method_AddPlayer = new Method<global::PlayerProgression.Command.AddPlayerRequest, global::PlayerProgression.Command.AddPlayerReply>(
        MethodType.Unary,
        "AddPlayer",
        __Marshaller_AddPlayerRequest,
        __Marshaller_AddPlayerReply);

    static readonly Method<global::PlayerProgression.Command.StartGameRequest, global::PlayerProgression.Command.StartGameReply> __Method_StartGame = new Method<global::PlayerProgression.Command.StartGameRequest, global::PlayerProgression.Command.StartGameReply>(
        MethodType.Unary,
        "StartGame",
        __Marshaller_StartGameRequest,
        __Marshaller_StartGameReply);

    // client-side stub interface
    public interface IControllerClient
    {
      global::PlayerProgression.Command.AddPlayerReply AddPlayer(global::PlayerProgression.Command.AddPlayerRequest request, CancellationToken token = default(CancellationToken));
      Task<global::PlayerProgression.Command.AddPlayerReply> AddPlayerAsync(global::PlayerProgression.Command.AddPlayerRequest request, CancellationToken token = default(CancellationToken));
      global::PlayerProgression.Command.StartGameReply StartGame(global::PlayerProgression.Command.StartGameRequest request, CancellationToken token = default(CancellationToken));
      Task<global::PlayerProgression.Command.StartGameReply> StartGameAsync(global::PlayerProgression.Command.StartGameRequest request, CancellationToken token = default(CancellationToken));
    }

    // server-side interface
    public interface IController
    {
      Task<global::PlayerProgression.Command.AddPlayerReply> AddPlayer(ServerCallContext context, global::PlayerProgression.Command.AddPlayerRequest request);
      Task<global::PlayerProgression.Command.StartGameReply> StartGame(ServerCallContext context, global::PlayerProgression.Command.StartGameRequest request);
    }

    // client stub
    public class ControllerClient : AbstractStub<ControllerClient, StubConfiguration>, IControllerClient
    {
      public ControllerClient(Channel channel) : this(channel, StubConfiguration.Default)
      {
      }
      public ControllerClient(Channel channel, StubConfiguration config) : base(channel, config)
      {
      }
      public global::PlayerProgression.Command.AddPlayerReply AddPlayer(global::PlayerProgression.Command.AddPlayerRequest request, CancellationToken token = default(CancellationToken))
      {
        var call = CreateCall(__ServiceName, __Method_AddPlayer);
        return Calls.BlockingUnaryCall(call, request, token);
      }
      public Task<global::PlayerProgression.Command.AddPlayerReply> AddPlayerAsync(global::PlayerProgression.Command.AddPlayerRequest request, CancellationToken token = default(CancellationToken))
      {
        var call = CreateCall(__ServiceName, __Method_AddPlayer);
        return Calls.AsyncUnaryCall(call, request, token);
      }
      public global::PlayerProgression.Command.StartGameReply StartGame(global::PlayerProgression.Command.StartGameRequest request, CancellationToken token = default(CancellationToken))
      {
        var call = CreateCall(__ServiceName, __Method_StartGame);
        return Calls.BlockingUnaryCall(call, request, token);
      }
      public Task<global::PlayerProgression.Command.StartGameReply> StartGameAsync(global::PlayerProgression.Command.StartGameRequest request, CancellationToken token = default(CancellationToken))
      {
        var call = CreateCall(__ServiceName, __Method_StartGame);
        return Calls.AsyncUnaryCall(call, request, token);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IController serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_AddPlayer, serviceImpl.AddPlayer)
          .AddMethod(__Method_StartGame, serviceImpl.StartGame).Build();
    }

    // creates a new client stub
    public static IControllerClient NewStub(Channel channel)
    {
      return new ControllerClient(channel);
    }

    // creates a new client stub
    public static IControllerClient NewStub(Channel channel, StubConfiguration config)
    {
      return new ControllerClient(channel, config);
    }
  }
}
#endregion
