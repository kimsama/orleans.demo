// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace PlayerProgression.Command {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Command {

    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_PlayerProgression_Command_AddPlayerRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::PlayerProgression.Command.AddPlayerRequest, global::PlayerProgression.Command.AddPlayerRequest.Builder> internal__static_PlayerProgression_Command_AddPlayerRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_PlayerProgression_Command_AddPlayerReply__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::PlayerProgression.Command.AddPlayerReply, global::PlayerProgression.Command.AddPlayerReply.Builder> internal__static_PlayerProgression_Command_AddPlayerReply__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_PlayerProgression_Command_StartGameRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::PlayerProgression.Command.StartGameRequest, global::PlayerProgression.Command.StartGameRequest.Builder> internal__static_PlayerProgression_Command_StartGameRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_PlayerProgression_Command_StartGameReply__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::PlayerProgression.Command.StartGameReply, global::PlayerProgression.Command.StartGameReply.Builder> internal__static_PlayerProgression_Command_StartGameReply__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;

    static Command() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1jb21tYW5kLnByb3RvEhlQbGF5ZXJQcm9ncmVzc2lvbi5Db21tYW5kIiQK", 
            "EEFkZFBsYXllclJlcXVlc3QSEAoIcGxheWVySWQYASACKAUiIAoOQWRkUGxh", 
            "eWVyUmVwbHkSDgoGcmVzdWx0GAEgAigIIhIKEFN0YXJ0R2FtZVJlcXVlc3Qi", 
            "IAoOU3RhcnRHYW1lUmVwbHkSDgoGcmVzdWx0GAEgAigIMtYBCgpDb250cm9s", 
            "bGVyEmMKCUFkZFBsYXllchIrLlBsYXllclByb2dyZXNzaW9uLkNvbW1hbmQu", 
            "QWRkUGxheWVyUmVxdWVzdBopLlBsYXllclByb2dyZXNzaW9uLkNvbW1hbmQu", 
            "QWRkUGxheWVyUmVwbHkSYwoJU3RhcnRHYW1lEisuUGxheWVyUHJvZ3Jlc3Np", 
            "b24uQ29tbWFuZC5TdGFydEdhbWVSZXF1ZXN0GikuUGxheWVyUHJvZ3Jlc3Np", 
          "b24uQ29tbWFuZC5TdGFydEdhbWVSZXBseQ=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_PlayerProgression_Command_AddPlayerRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_PlayerProgression_Command_AddPlayerRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::PlayerProgression.Command.AddPlayerRequest, global::PlayerProgression.Command.AddPlayerRequest.Builder>(internal__static_PlayerProgression_Command_AddPlayerRequest__Descriptor,
                new string[] { "PlayerId", });
        internal__static_PlayerProgression_Command_AddPlayerReply__Descriptor = Descriptor.MessageTypes[1];
        internal__static_PlayerProgression_Command_AddPlayerReply__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::PlayerProgression.Command.AddPlayerReply, global::PlayerProgression.Command.AddPlayerReply.Builder>(internal__static_PlayerProgression_Command_AddPlayerReply__Descriptor,
                new string[] { "Result", });
        internal__static_PlayerProgression_Command_StartGameRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_PlayerProgression_Command_StartGameRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::PlayerProgression.Command.StartGameRequest, global::PlayerProgression.Command.StartGameRequest.Builder>(internal__static_PlayerProgression_Command_StartGameRequest__Descriptor,
                new string[] { });
        internal__static_PlayerProgression_Command_StartGameReply__Descriptor = Descriptor.MessageTypes[3];
        internal__static_PlayerProgression_Command_StartGameReply__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::PlayerProgression.Command.StartGameReply, global::PlayerProgression.Command.StartGameReply.Builder>(internal__static_PlayerProgression_Command_StartGameReply__Descriptor,
                new string[] { "Result", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AddPlayerRequest : pb::GeneratedMessage<AddPlayerRequest, AddPlayerRequest.Builder> {
    private AddPlayerRequest() { }
    private static readonly AddPlayerRequest defaultInstance = new AddPlayerRequest().MakeReadOnly();
    private static readonly string[] _addPlayerRequestFieldNames = new string[] { "playerId" };
    private static readonly uint[] _addPlayerRequestFieldTags = new uint[] { 8 };
    public static AddPlayerRequest DefaultInstance {
      get { return defaultInstance; }
    }

    public override AddPlayerRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override AddPlayerRequest ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::PlayerProgression.Command.Command.internal__static_PlayerProgression_Command_AddPlayerRequest__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<AddPlayerRequest, AddPlayerRequest.Builder> InternalFieldAccessors {
      get { return global::PlayerProgression.Command.Command.internal__static_PlayerProgression_Command_AddPlayerRequest__FieldAccessorTable; }
    }

    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private int playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public int PlayerId {
      get { return playerId_; }
    }

    public override bool IsInitialized {
      get {
        if (!hasPlayerId) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _addPlayerRequestFieldNames;
      if (hasPlayerId) {
        output.WriteInt32(1, field_names[0], PlayerId);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasPlayerId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, PlayerId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AddPlayerRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AddPlayerRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AddPlayerRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AddPlayerRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AddPlayerRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AddPlayerRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AddPlayerRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AddPlayerRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AddPlayerRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AddPlayerRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AddPlayerRequest MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AddPlayerRequest prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AddPlayerRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AddPlayerRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private AddPlayerRequest result;

      private AddPlayerRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          AddPlayerRequest original = result;
          result = new AddPlayerRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override AddPlayerRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PlayerProgression.Command.AddPlayerRequest.Descriptor; }
      }

      public override AddPlayerRequest DefaultInstanceForType {
        get { return global::PlayerProgression.Command.AddPlayerRequest.DefaultInstance; }
      }

      public override AddPlayerRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AddPlayerRequest) {
          return MergeFrom((AddPlayerRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(AddPlayerRequest other) {
        if (other == global::PlayerProgression.Command.AddPlayerRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_addPlayerRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _addPlayerRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerId = input.ReadInt32(ref result.playerId_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public int PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(int value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0;
        return this;
      }
    }
    static AddPlayerRequest() {
      object.ReferenceEquals(global::PlayerProgression.Command.Command.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AddPlayerReply : pb::GeneratedMessage<AddPlayerReply, AddPlayerReply.Builder> {
    private AddPlayerReply() { }
    private static readonly AddPlayerReply defaultInstance = new AddPlayerReply().MakeReadOnly();
    private static readonly string[] _addPlayerReplyFieldNames = new string[] { "result" };
    private static readonly uint[] _addPlayerReplyFieldTags = new uint[] { 8 };
    public static AddPlayerReply DefaultInstance {
      get { return defaultInstance; }
    }

    public override AddPlayerReply DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override AddPlayerReply ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::PlayerProgression.Command.Command.internal__static_PlayerProgression_Command_AddPlayerReply__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<AddPlayerReply, AddPlayerReply.Builder> InternalFieldAccessors {
      get { return global::PlayerProgression.Command.Command.internal__static_PlayerProgression_Command_AddPlayerReply__FieldAccessorTable; }
    }

    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private bool result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public bool Result {
      get { return result_; }
    }

    public override bool IsInitialized {
      get {
        if (!hasResult) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _addPlayerReplyFieldNames;
      if (hasResult) {
        output.WriteBool(1, field_names[0], Result);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Result);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AddPlayerReply ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AddPlayerReply ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AddPlayerReply ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AddPlayerReply ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AddPlayerReply ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AddPlayerReply ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AddPlayerReply ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AddPlayerReply ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AddPlayerReply ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AddPlayerReply ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AddPlayerReply MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AddPlayerReply prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AddPlayerReply, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AddPlayerReply cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private AddPlayerReply result;

      private AddPlayerReply PrepareBuilder() {
        if (resultIsReadOnly) {
          AddPlayerReply original = result;
          result = new AddPlayerReply();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override AddPlayerReply MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PlayerProgression.Command.AddPlayerReply.Descriptor; }
      }

      public override AddPlayerReply DefaultInstanceForType {
        get { return global::PlayerProgression.Command.AddPlayerReply.DefaultInstance; }
      }

      public override AddPlayerReply BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AddPlayerReply) {
          return MergeFrom((AddPlayerReply) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(AddPlayerReply other) {
        if (other == global::PlayerProgression.Command.AddPlayerReply.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_addPlayerReplyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _addPlayerReplyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadBool(ref result.result_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasResult {
        get { return result.hasResult; }
      }
      public bool Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(bool value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = false;
        return this;
      }
    }
    static AddPlayerReply() {
      object.ReferenceEquals(global::PlayerProgression.Command.Command.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StartGameRequest : pb::GeneratedMessage<StartGameRequest, StartGameRequest.Builder> {
    private StartGameRequest() { }
    private static readonly StartGameRequest defaultInstance = new StartGameRequest().MakeReadOnly();
    private static readonly string[] _startGameRequestFieldNames = new string[] {  };
    private static readonly uint[] _startGameRequestFieldTags = new uint[] {  };
    public static StartGameRequest DefaultInstance {
      get { return defaultInstance; }
    }

    public override StartGameRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override StartGameRequest ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::PlayerProgression.Command.Command.internal__static_PlayerProgression_Command_StartGameRequest__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<StartGameRequest, StartGameRequest.Builder> InternalFieldAccessors {
      get { return global::PlayerProgression.Command.Command.internal__static_PlayerProgression_Command_StartGameRequest__FieldAccessorTable; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _startGameRequestFieldNames;
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static StartGameRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StartGameRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StartGameRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StartGameRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StartGameRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StartGameRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StartGameRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StartGameRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StartGameRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StartGameRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StartGameRequest MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StartGameRequest prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StartGameRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StartGameRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private StartGameRequest result;

      private StartGameRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          StartGameRequest original = result;
          result = new StartGameRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override StartGameRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PlayerProgression.Command.StartGameRequest.Descriptor; }
      }

      public override StartGameRequest DefaultInstanceForType {
        get { return global::PlayerProgression.Command.StartGameRequest.DefaultInstance; }
      }

      public override StartGameRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StartGameRequest) {
          return MergeFrom((StartGameRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(StartGameRequest other) {
        if (other == global::PlayerProgression.Command.StartGameRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_startGameRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _startGameRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }

    }
    static StartGameRequest() {
      object.ReferenceEquals(global::PlayerProgression.Command.Command.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StartGameReply : pb::GeneratedMessage<StartGameReply, StartGameReply.Builder> {
    private StartGameReply() { }
    private static readonly StartGameReply defaultInstance = new StartGameReply().MakeReadOnly();
    private static readonly string[] _startGameReplyFieldNames = new string[] { "result" };
    private static readonly uint[] _startGameReplyFieldTags = new uint[] { 8 };
    public static StartGameReply DefaultInstance {
      get { return defaultInstance; }
    }

    public override StartGameReply DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override StartGameReply ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::PlayerProgression.Command.Command.internal__static_PlayerProgression_Command_StartGameReply__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<StartGameReply, StartGameReply.Builder> InternalFieldAccessors {
      get { return global::PlayerProgression.Command.Command.internal__static_PlayerProgression_Command_StartGameReply__FieldAccessorTable; }
    }

    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private bool result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public bool Result {
      get { return result_; }
    }

    public override bool IsInitialized {
      get {
        if (!hasResult) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _startGameReplyFieldNames;
      if (hasResult) {
        output.WriteBool(1, field_names[0], Result);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Result);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static StartGameReply ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StartGameReply ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StartGameReply ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StartGameReply ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StartGameReply ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StartGameReply ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StartGameReply ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StartGameReply ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StartGameReply ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StartGameReply ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StartGameReply MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StartGameReply prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StartGameReply, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StartGameReply cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private StartGameReply result;

      private StartGameReply PrepareBuilder() {
        if (resultIsReadOnly) {
          StartGameReply original = result;
          result = new StartGameReply();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override StartGameReply MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PlayerProgression.Command.StartGameReply.Descriptor; }
      }

      public override StartGameReply DefaultInstanceForType {
        get { return global::PlayerProgression.Command.StartGameReply.DefaultInstance; }
      }

      public override StartGameReply BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StartGameReply) {
          return MergeFrom((StartGameReply) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(StartGameReply other) {
        if (other == global::PlayerProgression.Command.StartGameReply.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_startGameReplyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _startGameReplyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadBool(ref result.result_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasResult {
        get { return result.hasResult; }
      }
      public bool Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(bool value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = false;
        return this;
      }
    }
    static StartGameReply() {
      object.ReferenceEquals(global::PlayerProgression.Command.Command.Descriptor, null);
    }
  }

  #endregion

}

#endregion Designer generated code
